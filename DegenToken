// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract DegenToken is ERC20 {

    address public owner;

    mapping(uint => uint) public itemCosts;

    constructor() ERC20("Degen", "DGN") {
        owner = msg.sender;
        itemCosts[1] = 100;
        itemCosts[2] = 200;
        itemCosts[3] = 300;
    }


    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    event Redeemed(address indexed account, uint itemNo, uint256 amount);

    function mint(address to, uint amount) public onlyOwner {
        _mint(to, amount);
    }

    function burn(uint amount) public {
        _burn(msg.sender, amount);
    }

    function redeem(uint itemNo) public {
        uint256 amount = itemCosts[itemNo];
        _burn(msg.sender, amount);
        emit Redeemed(msg.sender, itemNo, amount);
    }

    function transfer(address to, uint amount) public override returns(bool){
		_transfer(msg.sender, to, amount);
		return true;
	}
}
